// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: v1/diddoc/service.proto

package diddoc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DIDDocClient is the client API for DIDDoc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DIDDocClient interface {
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	GetMetadataHistory(ctx context.Context, in *GetMetadataHistoryRequest, opts ...grpc.CallOption) (*GetMetadataHistoryResponse, error)
	SaveMetadata(ctx context.Context, in *SaveMetadataRequest, opts ...grpc.CallOption) (*SaveMetadataResponse, error)
}

type dIDDocClient struct {
	cc grpc.ClientConnInterface
}

func NewDIDDocClient(cc grpc.ClientConnInterface) DIDDocClient {
	return &dIDDocClient{cc}
}

func (c *dIDDocClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, "/v1.diddoc.DIDDoc/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dIDDocClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, "/v1.diddoc.DIDDoc/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dIDDocClient) GetMetadataHistory(ctx context.Context, in *GetMetadataHistoryRequest, opts ...grpc.CallOption) (*GetMetadataHistoryResponse, error) {
	out := new(GetMetadataHistoryResponse)
	err := c.cc.Invoke(ctx, "/v1.diddoc.DIDDoc/GetMetadataHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dIDDocClient) SaveMetadata(ctx context.Context, in *SaveMetadataRequest, opts ...grpc.CallOption) (*SaveMetadataResponse, error) {
	out := new(SaveMetadataResponse)
	err := c.cc.Invoke(ctx, "/v1.diddoc.DIDDoc/SaveMetadata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DIDDocServer is the server API for DIDDoc service.
// All implementations must embed UnimplementedDIDDocServer
// for forward compatibility
type DIDDocServer interface {
	Register(context.Context, *RegisterRequest) (*RegisterResponse, error)
	Get(context.Context, *GetRequest) (*GetResponse, error)
	GetMetadataHistory(context.Context, *GetMetadataHistoryRequest) (*GetMetadataHistoryResponse, error)
	SaveMetadata(context.Context, *SaveMetadataRequest) (*SaveMetadataResponse, error)
	mustEmbedUnimplementedDIDDocServer()
}

// UnimplementedDIDDocServer must be embedded to have forward compatible implementations.
type UnimplementedDIDDocServer struct {
}

func (UnimplementedDIDDocServer) Register(context.Context, *RegisterRequest) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedDIDDocServer) Get(context.Context, *GetRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedDIDDocServer) GetMetadataHistory(context.Context, *GetMetadataHistoryRequest) (*GetMetadataHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMetadataHistory not implemented")
}
func (UnimplementedDIDDocServer) SaveMetadata(context.Context, *SaveMetadataRequest) (*SaveMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveMetadata not implemented")
}
func (UnimplementedDIDDocServer) mustEmbedUnimplementedDIDDocServer() {}

// UnsafeDIDDocServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DIDDocServer will
// result in compilation errors.
type UnsafeDIDDocServer interface {
	mustEmbedUnimplementedDIDDocServer()
}

func RegisterDIDDocServer(s grpc.ServiceRegistrar, srv DIDDocServer) {
	s.RegisterService(&DIDDoc_ServiceDesc, srv)
}

func _DIDDoc_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DIDDocServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.diddoc.DIDDoc/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DIDDocServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DIDDoc_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DIDDocServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.diddoc.DIDDoc/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DIDDocServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DIDDoc_GetMetadataHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMetadataHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DIDDocServer).GetMetadataHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.diddoc.DIDDoc/GetMetadataHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DIDDocServer).GetMetadataHistory(ctx, req.(*GetMetadataHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DIDDoc_SaveMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DIDDocServer).SaveMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.diddoc.DIDDoc/SaveMetadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DIDDocServer).SaveMetadata(ctx, req.(*SaveMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DIDDoc_ServiceDesc is the grpc.ServiceDesc for DIDDoc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DIDDoc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.diddoc.DIDDoc",
	HandlerType: (*DIDDocServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _DIDDoc_Register_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _DIDDoc_Get_Handler,
		},
		{
			MethodName: "GetMetadataHistory",
			Handler:    _DIDDoc_GetMetadataHistory_Handler,
		},
		{
			MethodName: "SaveMetadata",
			Handler:    _DIDDoc_SaveMetadata_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/diddoc/service.proto",
}
