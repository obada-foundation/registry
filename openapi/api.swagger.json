{
  "swagger": "2.0",
  "info": {
    "title": "OBADA DID Registry API",
    "version": "version not set",
    "contact": {
      "name": "Andrii Tarykin",
      "email": "techops@obada.io"
    }
  },
  "tags": [
    {
      "name": "Account"
    },
    {
      "name": "DIDDoc"
    }
  ],
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/api/v1.0/accounts/register": {
      "post": {
        "summary": "RegisterAccount RPC method allows a user to register an OBADA blockchain account.",
        "operationId": "Account_RegisterAccount",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/accountRegisterAccountResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "RegisterAccountRequest is the payload used to request the registration of a new account.\nA public key is required for the registration process.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/accountRegisterAccountRequest"
            }
          }
        ],
        "tags": [
          "Account"
        ]
      }
    },
    "/api/v1.0/accounts/{address}": {
      "get": {
        "summary": "The GetPublicKey RPC method allows a client to query the public key associated with a given blockchain address.",
        "operationId": "Account_GetPublicKey",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/accountGetPublicKeyResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "address",
            "description": "OBADA blockchain address of the account for which the public key is requested. This field is mandatory.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Account"
        ]
      }
    },
    "/api/v1.0/diddoc/register": {
      "post": {
        "summary": "Register allows the registration of a new DID document in the registry.",
        "operationId": "DIDDoc_Register",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/diddocRegisterResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "RegisterRequest is the payload for requesting the registration of a new DID document.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/diddocRegisterRequest"
            }
          }
        ],
        "tags": [
          "DIDDoc"
        ]
      }
    },
    "/api/v1.0/diddoc/{did}": {
      "get": {
        "summary": "Get allows the retrieval of a DID document given its identifier.",
        "operationId": "DIDDoc_Get",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/diddocGetResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "did",
            "description": "The decentralized identifier of the DID document to retrieve.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "DIDDoc"
        ]
      }
    },
    "/api/v1.0/diddoc/{did}/history": {
      "get": {
        "summary": "GetMetadataHistory allows the retrieval of the metadata history of a DID document.",
        "operationId": "DIDDoc_GetMetadataHistory",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/diddocGetMetadataHistoryResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "did",
            "description": "The decentralized identifier of the DID document whose history is requested.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "DIDDoc"
        ]
      }
    },
    "/api/v1.0/diddoc/{did}/metadata": {
      "post": {
        "summary": "SaveMetadata allows storing metadata related to a DID document.",
        "operationId": "DIDDoc_SaveMetadata",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/diddocSaveMetadataResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "did",
            "description": "OBADA decentralized identifier of the DID document.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "signature": {
                  "type": "string",
                  "format": "byte",
                  "description": "The signature of the data."
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "objects": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/definitions/diddocObject"
                      },
                      "description": "Array of objects representing the metadata."
                    },
                    "authenticationKeyId": {
                      "type": "string",
                      "description": "The identifier of the authentication key."
                    }
                  },
                  "title": "The metadata records"
                }
              },
              "description": "SaveMetadataRequest is used to store metadata related to a DID document."
            }
          }
        ],
        "tags": [
          "DIDDoc"
        ]
      }
    },
    "/api/v1.0/diddoc/{did}/verification-methods": {
      "post": {
        "summary": "SaveVerificationMethods allows storing verification methods associated with a DID document.",
        "operationId": "DIDDoc_SaveVerificationMethods",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/diddocSaveVerificationMethodsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "did",
            "description": "The decentralized identifier of the DID document.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "signature": {
                  "type": "string",
                  "format": "byte",
                  "description": "The signature of the data."
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "verificationMethods": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/definitions/diddocVerificationMethod"
                      },
                      "description": "Array of VerificationMethod objects representing the verification methods."
                    },
                    "authentication": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "List of identifiers used for authentication."
                    },
                    "authenticationKeyId": {
                      "type": "string",
                      "description": "The identifier of the authentication key."
                    }
                  },
                  "description": "The verification methods data.",
                  "title": "The verification methods data."
                }
              },
              "description": "MsgSaveVerificationMethods represents a request to store verification methods."
            }
          }
        ],
        "tags": [
          "DIDDoc"
        ]
      }
    }
  },
  "definitions": {
    "accountGetPublicKeyResponse": {
      "type": "object",
      "properties": {
        "pubkey": {
          "type": "string",
          "description": "The public key associated with the queried account address."
        }
      },
      "description": "GetPublicKeyResponse returns the public key associated with an account address.\nIt carries the retrieved public key in the response."
    },
    "accountRegisterAccountRequest": {
      "type": "object",
      "properties": {
        "pubkey": {
          "type": "string",
          "description": "Public key of the account to be registered. This field is mandatory."
        }
      },
      "description": "RegisterAccountRequest is the payload used to request the registration of a new account.\nA public key is required for the registration process.",
      "required": [
        "pubkey"
      ]
    },
    "accountRegisterAccountResponse": {
      "type": "object",
      "description": "RegisterAccountResponse is the response payload received after attempting account registration.\nCurrently, this message doesn't convey any data but can be expanded to include fields such as registration status in future iterations."
    },
    "diddocDIDDocument": {
      "type": "object",
      "properties": {
        "context": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The context field helps define the document's use of vocabularies via URIs."
        },
        "id": {
          "type": "string",
          "description": "The id field is a string that uniquely identifies the DID subject."
        },
        "controller": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of controller DIDs, indicates parties that have control over the DID Document."
        },
        "verificationMethod": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/diddocVerificationMethod"
          },
          "description": "The verification method array includes public keys and may include other verification methods."
        },
        "authentication": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Reference to verification method(s), used for authentication."
        },
        "assertionMethod": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Reference to verification method(s), used for assertion."
        },
        "capabilityInvocation": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Reference to verification method(s), used for capability invocation."
        },
        "capabilityDelegation": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Reference to verification method(s), used for capability delegation."
        },
        "keyAgreement": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Reference to verification method(s), used for key agreement."
        },
        "service": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/diddocService"
          },
          "description": "Service endpoints related to the DID subject."
        },
        "alsoKnownAs": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Alternate identifiers for the DID subject."
        },
        "metadata": {
          "$ref": "#/definitions/diddocMetadata",
          "description": "Metadata about the DID document."
        }
      },
      "title": "DIDDocument defines a standard application-independent format. \nIt is a set of data that provides the means for a DID subject to prove control over it.\nRefer: https://www.w3.org/TR/did-core/"
    },
    "diddocDataArray": {
      "type": "object",
      "properties": {
        "versionHash": {
          "type": "string",
          "description": "Hash representing the version of the data."
        },
        "rootHash": {
          "type": "string",
          "description": "Root hash of the data set."
        },
        "objects": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/diddocObject"
          },
          "description": "Array of objects associated with the data."
        }
      },
      "description": "DataArray encapsulates arrays of data, with metadata history and versions."
    },
    "diddocGetMetadataHistoryResponse": {
      "type": "object",
      "properties": {
        "metadataHistory": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/diddocDataArray"
          },
          "description": "Map containing the history of metadata changes. The key is a timestamp and the value is a DataArray object representing the changes at that time."
        }
      },
      "description": "GetMetadataHistoryResponse contains the history of metadata changes of the DID document."
    },
    "diddocGetResponse": {
      "type": "object",
      "properties": {
        "document": {
          "$ref": "#/definitions/diddocDIDDocument",
          "description": "The DID document corresponding to the requested identifier."
        }
      },
      "description": "GetResponse contains the DID document associated with the provided identifier."
    },
    "diddocMetadata": {
      "type": "object",
      "properties": {
        "versionId": {
          "type": "integer",
          "format": "int32",
          "description": "Version id of the metadata."
        },
        "versionHash": {
          "type": "string",
          "description": "Hash representing the version of the metadata."
        },
        "rootHash": {
          "type": "string",
          "description": "Root hash of the DID Document."
        },
        "objects": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/diddocObject"
          },
          "description": "Additional objects related to the DID Document."
        }
      },
      "description": "Metadata represents meta-information related to the DID Document and its activities."
    },
    "diddocMsgSaveVerificationMethodsData": {
      "type": "object",
      "properties": {
        "did": {
          "type": "string",
          "description": "The decentralized identifier of the DID document."
        },
        "verificationMethods": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/diddocVerificationMethod"
          },
          "description": "Array of VerificationMethod objects representing the verification methods."
        },
        "authentication": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "List of identifiers used for authentication."
        },
        "authenticationKeyId": {
          "type": "string",
          "description": "The identifier of the authentication key."
        }
      },
      "description": "Nested message representing the data of the verification methods."
    },
    "diddocObject": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string",
          "description": "URL where the object can be found or retrieved."
        },
        "hashEncryptedDataObject": {
          "type": "string",
          "description": "Hash of the encrypted data object."
        },
        "hashUnencryptedObject": {
          "type": "string",
          "description": "Hash of the unencrypted object."
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Additional metadata associated with the object."
        },
        "hashUnencryptedMetadata": {
          "type": "string",
          "description": "Hash of the unencrypted metadata."
        },
        "hashEncryptedMetadata": {
          "type": "string",
          "description": "Hash of the encrypted metadata."
        },
        "dataObjectHash": {
          "type": "string",
          "description": "Hash of the data object itself."
        }
      },
      "description": "Object represents data structures that might be associated with metadata, \nproviding additional details that can be independently hashed and referenced."
    },
    "diddocRegisterRequest": {
      "type": "object",
      "properties": {
        "did": {
          "type": "string",
          "description": "The decentralized identifier for the DID document to be registered."
        },
        "verificationMethod": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/diddocVerificationMethod"
          },
          "description": "Methods used to verify that the DID subject agrees with the DID document."
        },
        "authentication": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "List of identifiers used for authentication."
        },
        "service": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/diddocService"
          },
          "description": "Service endpoints related to the DID."
        }
      },
      "description": "RegisterRequest is the payload for requesting the registration of a new DID document."
    },
    "diddocRegisterResponse": {
      "type": "object",
      "description": "RegisterResponse is the response payload for the registration request.\nCurrently empty but can be expanded in future iterations."
    },
    "diddocSaveMetadataRequestData": {
      "type": "object",
      "properties": {
        "did": {
          "type": "string",
          "description": "OBADA decentralized identifier of the DID document."
        },
        "objects": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/diddocObject"
          },
          "description": "Array of objects representing the metadata."
        },
        "authenticationKeyId": {
          "type": "string",
          "description": "The identifier of the authentication key."
        }
      },
      "description": "Nested message representing data of the metadata."
    },
    "diddocSaveMetadataResponse": {
      "type": "object",
      "description": "SaveMetadataResponse is the response payload after attempting to save metadata.\nCurrently empty but can be expanded in future iterations."
    },
    "diddocSaveVerificationMethodsResponse": {
      "type": "object",
      "description": "SaveVerificationMethodsResponse is the response payload for saving verification methods.\nCurrently empty but can be expanded in future iterations."
    },
    "diddocService": {
      "type": "object",
      "properties": {
        "context": {
          "type": "string",
          "description": "Context that relates to the service."
        },
        "id": {
          "type": "string",
          "description": "Identifier of the service endpoint."
        },
        "type": {
          "type": "string",
          "description": "Type of service endpoint (e.g., VerifiableCredentialService)."
        },
        "serviceEndpoint": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The URI of the service endpoint."
        }
      },
      "description": "Service defines service endpoints for a DID subject, with types and endpoint URIs.\nThese services can be any type of service the entity wishes to advertise, \nincluding decentralized identity management services for further discovery, authentication, \nauthorization, or interaction."
    },
    "diddocVerificationMethod": {
      "type": "object",
      "properties": {
        "context": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Context that relates to the verification method."
        },
        "id": {
          "type": "string",
          "description": "Identifier of the verification method."
        },
        "type": {
          "type": "string",
          "description": "Type of verification method (e.g., Ed25519VerificationKey2018)."
        },
        "controller": {
          "type": "string",
          "description": "Controller of the verification method."
        },
        "publicKeyJwk": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Public key details in JWK format."
        },
        "publicKeyMultibase": {
          "type": "string",
          "description": "Public key encoded in multibase format."
        },
        "publicKeyBase58": {
          "type": "string",
          "description": "Public key encoded in base58 format."
        }
      },
      "description": "VerificationMethod is employed to check the validity of a verification relationship. \nThese could include, but are not limited to, cryptographic public keys and services."
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string"
        }
      },
      "additionalProperties": {}
    },
    "rpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    }
  }
}
